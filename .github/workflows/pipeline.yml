name: CI/CD - v0.3

on:
  push:
  pull_request:

jobs:
  Test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.22"

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install static analysis tools
        run: |
          go install golang.org/x/lint/golint@latest
          go install honnef.co/go/tools/cmd/staticcheck@latest
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          go install github.com/psampaz/go-mod-outdated@latest
          go install github.com/remyoudompheng/go-misc/deadcode@latest

      - name: Go static analysis
        run: |
          golint ./...
          staticcheck ./...
          go vet ./...
          deadcode .

      - name: Dependency management
        run: |
          go mod vendor
          go mod verify
          go mod tidy

      - name: Security scanning
        run: |
          gosec ./...

  Build:
    needs: Test
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.determine-tag.outputs.tag }}

    steps:
      - uses: actions/checkout@v4

      - name: Determine image tag
        id: determine-tag
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          else
            echo "tag=v${{ github.run_number }}" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker build and push
        run: |
          docker buildx build \
          --platform linux/amd64 \
          --pull \
          --build-arg VERSION=${{ steps.determine-tag.outputs.tag }} \
          --build-arg GIT_COMMIT=${{ github.sha }} \
          --build-arg BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ") \
          --cache-from cube8021/push-to-k8s:latest \
          -t cube8021/push-to-k8s:"${{ steps.determine-tag.outputs.tag }}" \
          -t cube8021/push-to-k8s:latest \
          --push \
          -f Dockerfile .

  Publish-Helm-Chart:
    runs-on: ubuntu-latest
    needs:
      - Build
    outputs:
      chart-version: ${{ steps.get-chart-version.outputs.version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install required packages
        run: |
          sudo apt-get update
          sudo apt-get install -y gettext-base

      - name: Set up Helm
        uses: azure/setup-helm@v4.2.0

      - name: Determine Chart Version
        id: get-chart-version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "version=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          else
            echo "version=v${{ github.run_number }}" >> $GITHUB_OUTPUT
          fi

      - name: Prepare values for helm lint
        run: |
          rm -f charts/push-to-k8s/Chart.yaml charts/push-to-k8s/values.yaml
          export CHART_VERSION="${{ steps.get-chart-version.outputs.version }}"
          export APP_VERSION="${{ needs.Build.outputs.image-tag }}"
          export IMAGE_TAG="${{ needs.Build.outputs.image-tag }}"
          envsubst < charts/push-to-k8s/Chart.yaml.template > charts/push-to-k8s/Chart.yaml
          envsubst < charts/push-to-k8s/values.yaml.template > charts/push-to-k8s/values.yaml
          ls -la charts/push-to-k8s/Chart.yaml charts/push-to-k8s/values.yaml

      - name: Helm Lint - Push-to-K8s
        run: helm lint charts/push-to-k8s/

      - name: Package and Push Helm chart - Push-to-K8s
        run: |
          export CHART_VERSION="${{ steps.get-chart-version.outputs.version }}"
          export APP_VERSION="${{ needs.Build.outputs.image-tag }}"
          export IMAGE_TAG="${{ needs.Build.outputs.image-tag }}"
          echo "CHART_VERSION=${CHART_VERSION}"
          echo "APP_VERSION=${APP_VERSION}"
          echo "IMAGE_TAG=${IMAGE_TAG}"
          envsubst < charts/push-to-k8s/Chart.yaml.template > charts/push-to-k8s/Chart.yaml
          envsubst < charts/push-to-k8s/values.yaml.template > charts/push-to-k8s/values.yaml
          mkdir -p helm/repo
          helm package charts/push-to-k8s --destination helm/repo

      - name: Checkout helm-chart repository
        uses: actions/checkout@v4
        with:
          repository: SupportTools/helm-chart
          path: helm-chart
          token: ${{ secrets.BOT_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.email "github-action@users.noreply.github.com"
          git config --global user.name "GitHub Action"

      - name: Update Helm repository
        run: |
          cp helm/repo/push-to-k8s-*.tgz helm-chart/
          cd helm-chart
          helm repo index . --url https://charts.support.tools/
          git add .
          git commit -m "Update Push-to-K8s Helm chart ${{ steps.get-chart-version.outputs.version }}"
          git push

      - name: Verify Chart Availability
        run: |
          helm repo add charts https://charts.support.tools/
          MAX_TRIES=30
          SLEEP_TIME=10
          COUNTER=0
          CHART_VERSION="${{ steps.get-chart-version.outputs.version }}"

          while [ $COUNTER -lt $MAX_TRIES ]; do
            helm repo update
            if helm search repo charts/push-to-k8s --version $CHART_VERSION | grep -q $CHART_VERSION; then
              echo "Chart push-to-k8s version $CHART_VERSION found in repository"
              exit 0
            fi
            echo "Waiting for chart to become available... (Attempt $((COUNTER+1))/$MAX_TRIES)"
            sleep $SLEEP_TIME
            let COUNTER=COUNTER+1
          done

          echo "Chart did not become available within the timeout period"
          exit 1
